/*
 *
 * www.jinvovo.com Inc
 * Copyright (c) 2017 All Rights Reserved.
 *
 */
package com.jvv.openapi.dal.mapper;

//import org.springframework.stereotype.Repository;
//import org.springframework.transaction.annotation.Transactional;

import org.apache.ibatis.annotations.Param;

import com.jvv.openapi.dal.entity.MerchantDO;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>merchant</tt>.
 *
 * This file is generated by <tt>iwallet-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>iwallet</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/merchant.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>iwallet-dalgen</tt> 
 * to generate this file.
 *
 * @author Cheng Li
 * @author Turalyon
 */
 @SuppressWarnings("rawtypes")
public interface MerchantMapper {
	/**
	 *  Insert one <tt>MerchantDO</tt> object to DB table <tt>merchant</tt>, return primary key
	 *
	 * 插入数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into merchant(id,partner_id,merchant_name,security_code,status,active_time,effective_time,prompt_type,raw_add_time,raw_update_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param merchant
	 *	@return int
	 */	 

    public int insert( @Param("merchant")MerchantDO merchant);

	/**
	 *  Query DB table <tt>merchant</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from merchant</tt>
	 *
	 *	@param merchant
	 *	@param start
	 *	@param pageSize
	 *	@return List<MerchantDO>
	 */	 

    public List<MerchantDO> query( @Param("merchant")MerchantDO merchant,  @Param("start")long start,  @Param("pageSize")int pageSize);

	/**
	 *  Query DB table <tt>merchant</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from merchant</tt>
	 *
	 *	@param merchant
	 *	@return long
	 */	 

    public long queryCount( @Param("merchant")MerchantDO merchant);

	/**
	 *  Update DB table <tt>merchant</tt>.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update merchant set partner_id=? where (id = ?)</tt>
	 *
	 *	@param merchant
	 *	@return int
	 */	 

    public int update( @Param("merchant")MerchantDO merchant);

	/**
	 *  Delete records from DB table <tt>merchant</tt>.
	 *
	 * 根据主键删除数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from merchant where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 */	 

    public int delete( @Param("id")Long id);

	/**
	 *  Query DB table <tt>merchant</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from merchant merchant where (partner_id = ?)</tt>
	 *
	 *	@param partnerId
	 *	@return MerchantDO
	 */	 

    public MerchantDO findByPartnerId( @Param("partnerId")String partnerId);

	/**
	 *  Update DB table <tt>merchant</tt>.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update merchant set merchant_name=? where (id = ?)</tt>
	 *
	 *	@param merchant
	 *	@return int
	 */	 

    public int updateByPartnerId( @Param("merchant")MerchantDO merchant);

	/**
	 *  Delete records from DB table <tt>merchant</tt>.
	 *
	 * 根据主键删除数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from merchant where (partner_id = ?)</tt>
	 *
	 *	@param partnerId
	 *	@return int
	 */	 

    public int deleteByPartnerId( @Param("partnerId")String partnerId);

	/**
	 *  Query DB table <tt>merchant</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from merchant</tt>
	 *
	 *	@param partnerIdList
	 *	@return List<MerchantDO>
	 */	 

    public List<MerchantDO> findByPartnerIdIn( @Param("partnerIdList")List partnerIdList);

	/**
	 *  Query DB table <tt>merchant</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from merchant merchant where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return MerchantDO
	 */	 

    public MerchantDO findById( @Param("id")Long id);

	/**
	 *  Query DB table <tt>merchant</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from merchant</tt>
	 *
	 *	@param idList
	 *	@return List<MerchantDO>
	 */	 

    public List<MerchantDO> findByIdIn( @Param("idList")List idList);

}
