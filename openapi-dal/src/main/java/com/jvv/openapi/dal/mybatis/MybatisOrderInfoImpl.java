/*
 *
 * www.jinvovo.com Inc
 * Copyright (c) 2017 All Rights Reserved.
 *
 */
package com.jvv.openapi.dal.mybatis;

import org.apache.ibatis.annotations.Param;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

import org.mybatis.spring.support.SqlSessionDaoSupport;
import com.jvv.openapi.dal.mapper.OrderInfoMapper;


import com.jvv.openapi.dal.entity.OrderInfoDO;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An mybatis based implementation of dao interface <tt>com.jvv.openapi.dal.mapper.OrderInfoMapper</tt>.
 *
 * This file is generated by <tt>iwallet-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>iwallet</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/order_info.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>iwallet-dalgen</tt> 
 * to generate this file.
 *
 * @author Cheng Li
 * @author Turalyon
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

@Lazy
@Service("orderInfoMapper")
public class MybatisOrderInfoImpl extends SqlSessionDaoSupport implements OrderInfoMapper {
	/**
	 *  Insert one <tt>OrderInfoDO</tt> object to DB table <tt>order_info</tt>, return primary key
	 *
	 * 插入数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into order_info(id,gid,serial_no,service_name,service_version,partner_id,status,trade_date,merchant_order_no,request_params,result_code,result_message,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param orderInfo
	 *	@return int
	 */	 

    public int insert( @Param("orderInfo")OrderInfoDO orderInfo) {
    	if (orderInfo == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("orderInfo", orderInfo);
        _param.put("value", orderInfo);
    

        return  getSqlSession().insert(OrderInfoMapper.class.getName() + ".insert", _param);

    }


	/**
	 *  Query DB table <tt>order_info</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from order_info</tt>
	 *
	 *	@param orderInfo
	 *	@param start
	 *	@param pageSize
	 *	@return List<OrderInfoDO>
	 */	 

    public List<OrderInfoDO> query( @Param("orderInfo")OrderInfoDO orderInfo,  @Param("start")long start,  @Param("pageSize")int pageSize) {
    	if (orderInfo == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();

            _param.put("orderInfo", orderInfo);
        _param.put("start", new Long(start));
        _param.put("pageSize", new Integer(pageSize));


        return getSqlSession().selectList(OrderInfoMapper.class.getName() + ".query", _param);

    }


	/**
	 *  Query DB table <tt>order_info</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from order_info</tt>
	 *
	 *	@param orderInfo
	 *	@return long
	 */	 

    public long queryCount( @Param("orderInfo")OrderInfoDO orderInfo) {
    	if (orderInfo == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("orderInfo", orderInfo);
        _param.put("value", orderInfo);
    


	    Long retObj = (Long) getSqlSession().selectOne(OrderInfoMapper.class.getName() + ".queryCount", _param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }


	/**
	 *  Update DB table <tt>order_info</tt>.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update order_info set status=? where (id = ?)</tt>
	 *
	 *	@param orderInfo
	 *	@return int
	 */	 

    public int update( @Param("orderInfo")OrderInfoDO orderInfo) {
    	if (orderInfo == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("orderInfo", orderInfo);
        _param.put("value", orderInfo);
    

        return getSqlSession().update(OrderInfoMapper.class.getName() + ".update", _param);
    }


	/**
	 *  Delete records from DB table <tt>order_info</tt>.
	 *
	 * 根据主键删除数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from order_info where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 */	 

    public int delete( @Param("id")Long id) {
        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("id", id);
        _param.put("value", id);
    

        return getSqlSession().delete(OrderInfoMapper.class.getName() + ".delete", _param);
    }


	/**
	 *  Query DB table <tt>order_info</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from order_info orderInfo where (merchant_order_no = ?)</tt>
	 *
	 *	@param merchantOrderNo
	 *	@return OrderInfoDO
	 */	 

    public OrderInfoDO findByMerchantOrderNo( @Param("merchantOrderNo")String merchantOrderNo) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("merchantOrderNo", merchantOrderNo);
        _param.put("value", merchantOrderNo);
    

        return (OrderInfoDO) getSqlSession().selectOne(OrderInfoMapper.class.getName() + ".findByMerchantOrderNo", _param);

    }


	/**
	 *  Update DB table <tt>order_info</tt>.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update order_info set gid=? where (id = ?)</tt>
	 *
	 *	@param orderInfo
	 *	@return int
	 */	 

    public int updateByMerchantOrderNo( @Param("orderInfo")OrderInfoDO orderInfo) {
    	if (orderInfo == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("orderInfo", orderInfo);
        _param.put("value", orderInfo);
    

        return getSqlSession().update(OrderInfoMapper.class.getName() + ".updateByMerchantOrderNo", _param);
    }


	/**
	 *  Delete records from DB table <tt>order_info</tt>.
	 *
	 * 根据主键删除数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from order_info where (merchant_order_no = ?)</tt>
	 *
	 *	@param merchantOrderNo
	 *	@return int
	 */	 

    public int deleteByMerchantOrderNo( @Param("merchantOrderNo")String merchantOrderNo) {
        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("merchantOrderNo", merchantOrderNo);
        _param.put("value", merchantOrderNo);
    

        return getSqlSession().delete(OrderInfoMapper.class.getName() + ".deleteByMerchantOrderNo", _param);
    }


	/**
	 *  Query DB table <tt>order_info</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from order_info</tt>
	 *
	 *	@param merchantOrderNoList
	 *	@return List<OrderInfoDO>
	 */	 

    public List<OrderInfoDO> findByMerchantOrderNoIn( @Param("merchantOrderNoList")List merchantOrderNoList) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("merchantOrderNoList", merchantOrderNoList);
        _param.put("value", merchantOrderNoList);
    

        return getSqlSession().selectList(OrderInfoMapper.class.getName() + ".findByMerchantOrderNoIn", _param);

    }


	/**
	 *  Query DB table <tt>order_info</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from order_info orderInfo where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return OrderInfoDO
	 */	 

    public OrderInfoDO findById( @Param("id")Long id) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("id", id);
        _param.put("value", id);
    

        return (OrderInfoDO) getSqlSession().selectOne(OrderInfoMapper.class.getName() + ".findById", _param);

    }


	/**
	 *  Query DB table <tt>order_info</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from order_info</tt>
	 *
	 *	@param idList
	 *	@return List<OrderInfoDO>
	 */	 

    public List<OrderInfoDO> findByIdIn( @Param("idList")List idList) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("idList", idList);
        _param.put("value", idList);
    

        return getSqlSession().selectList(OrderInfoMapper.class.getName() + ".findByIdIn", _param);

    }


	/**
	 *  Query DB table <tt>order_info</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from order_info orderInfo where (serial_no = ?)</tt>
	 *
	 *	@param serialNo
	 *	@return OrderInfoDO
	 */	 

    public OrderInfoDO findBySerialNo( @Param("serialNo")String serialNo) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("serialNo", serialNo);
        _param.put("value", serialNo);
    

        return (OrderInfoDO) getSqlSession().selectOne(OrderInfoMapper.class.getName() + ".findBySerialNo", _param);

    }


	/**
	 *  Update DB table <tt>order_info</tt>.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update order_info set gid=? where (id = ?)</tt>
	 *
	 *	@param orderInfo
	 *	@return int
	 */	 

    public int updateBySerialNo( @Param("orderInfo")OrderInfoDO orderInfo) {
    	if (orderInfo == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("orderInfo", orderInfo);
        _param.put("value", orderInfo);
    

        return getSqlSession().update(OrderInfoMapper.class.getName() + ".updateBySerialNo", _param);
    }


	/**
	 *  Delete records from DB table <tt>order_info</tt>.
	 *
	 * 根据主键删除数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from order_info where (serial_no = ?)</tt>
	 *
	 *	@param serialNo
	 *	@return int
	 */	 

    public int deleteBySerialNo( @Param("serialNo")String serialNo) {
        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("serialNo", serialNo);
        _param.put("value", serialNo);
    

        return getSqlSession().delete(OrderInfoMapper.class.getName() + ".deleteBySerialNo", _param);
    }


	/**
	 *  Query DB table <tt>order_info</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from order_info</tt>
	 *
	 *	@param serialNoList
	 *	@return List<OrderInfoDO>
	 */	 

    public List<OrderInfoDO> findBySerialNoIn( @Param("serialNoList")List serialNoList) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("serialNoList", serialNoList);
        _param.put("value", serialNoList);
    

        return getSqlSession().selectList(OrderInfoMapper.class.getName() + ".findBySerialNoIn", _param);

    }



}
