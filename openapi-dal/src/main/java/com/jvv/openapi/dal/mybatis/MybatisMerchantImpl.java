/*
 *
 * www.jinvovo.com Inc
 * Copyright (c) 2017 All Rights Reserved.
 *
 */
package com.jvv.openapi.dal.mybatis;

import org.apache.ibatis.annotations.Param;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

import org.mybatis.spring.support.SqlSessionDaoSupport;
import com.jvv.openapi.dal.mapper.MerchantMapper;


import com.jvv.openapi.dal.entity.MerchantDO;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An mybatis based implementation of dao interface <tt>com.jvv.openapi.dal.mapper.MerchantMapper</tt>.
 *
 * This file is generated by <tt>iwallet-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>iwallet</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/merchant.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>iwallet-dalgen</tt> 
 * to generate this file.
 *
 * @author Cheng Li
 * @author Turalyon
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

@Lazy
@Service("merchantMapper")
public class MybatisMerchantImpl extends SqlSessionDaoSupport implements MerchantMapper {
	/**
	 *  Insert one <tt>MerchantDO</tt> object to DB table <tt>merchant</tt>, return primary key
	 *
	 * 插入数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into merchant(id,partner_id,merchant_name,security_code,status,active_time,effective_time,prompt_type,raw_add_time,raw_update_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param merchant
	 *	@return int
	 */	 

    public int insert( @Param("merchant")MerchantDO merchant) {
    	if (merchant == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("merchant", merchant);
        _param.put("value", merchant);
    

        return  getSqlSession().insert(MerchantMapper.class.getName() + ".insert", _param);

    }


	/**
	 *  Query DB table <tt>merchant</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from merchant</tt>
	 *
	 *	@param merchant
	 *	@param start
	 *	@param pageSize
	 *	@return List<MerchantDO>
	 */	 

    public List<MerchantDO> query( @Param("merchant")MerchantDO merchant,  @Param("start")long start,  @Param("pageSize")int pageSize) {
    	if (merchant == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();

            _param.put("merchant", merchant);
        _param.put("start", new Long(start));
        _param.put("pageSize", new Integer(pageSize));


        return getSqlSession().selectList(MerchantMapper.class.getName() + ".query", _param);

    }


	/**
	 *  Query DB table <tt>merchant</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from merchant</tt>
	 *
	 *	@param merchant
	 *	@return long
	 */	 

    public long queryCount( @Param("merchant")MerchantDO merchant) {
    	if (merchant == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("merchant", merchant);
        _param.put("value", merchant);
    


	    Long retObj = (Long) getSqlSession().selectOne(MerchantMapper.class.getName() + ".queryCount", _param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }


	/**
	 *  Update DB table <tt>merchant</tt>.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update merchant set partner_id=? where (id = ?)</tt>
	 *
	 *	@param merchant
	 *	@return int
	 */	 

    public int update( @Param("merchant")MerchantDO merchant) {
    	if (merchant == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("merchant", merchant);
        _param.put("value", merchant);
    

        return getSqlSession().update(MerchantMapper.class.getName() + ".update", _param);
    }


	/**
	 *  Delete records from DB table <tt>merchant</tt>.
	 *
	 * 根据主键删除数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from merchant where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 */	 

    public int delete( @Param("id")Long id) {
        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("id", id);
        _param.put("value", id);
    

        return getSqlSession().delete(MerchantMapper.class.getName() + ".delete", _param);
    }


	/**
	 *  Query DB table <tt>merchant</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from merchant merchant where (partner_id = ?)</tt>
	 *
	 *	@param partnerId
	 *	@return MerchantDO
	 */	 

    public MerchantDO findByPartnerId( @Param("partnerId")String partnerId) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("partnerId", partnerId);
        _param.put("value", partnerId);
    

        return (MerchantDO) getSqlSession().selectOne(MerchantMapper.class.getName() + ".findByPartnerId", _param);

    }


	/**
	 *  Update DB table <tt>merchant</tt>.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update merchant set merchant_name=? where (id = ?)</tt>
	 *
	 *	@param merchant
	 *	@return int
	 */	 

    public int updateByPartnerId( @Param("merchant")MerchantDO merchant) {
    	if (merchant == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("merchant", merchant);
        _param.put("value", merchant);
    

        return getSqlSession().update(MerchantMapper.class.getName() + ".updateByPartnerId", _param);
    }


	/**
	 *  Delete records from DB table <tt>merchant</tt>.
	 *
	 * 根据主键删除数据
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from merchant where (partner_id = ?)</tt>
	 *
	 *	@param partnerId
	 *	@return int
	 */	 

    public int deleteByPartnerId( @Param("partnerId")String partnerId) {
        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("partnerId", partnerId);
        _param.put("value", partnerId);
    

        return getSqlSession().delete(MerchantMapper.class.getName() + ".deleteByPartnerId", _param);
    }


	/**
	 *  Query DB table <tt>merchant</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from merchant</tt>
	 *
	 *	@param partnerIdList
	 *	@return List<MerchantDO>
	 */	 

    public List<MerchantDO> findByPartnerIdIn( @Param("partnerIdList")List partnerIdList) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("partnerIdList", partnerIdList);
        _param.put("value", partnerIdList);
    

        return getSqlSession().selectList(MerchantMapper.class.getName() + ".findByPartnerIdIn", _param);

    }


	/**
	 *  Query DB table <tt>merchant</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from merchant merchant where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return MerchantDO
	 */	 

    public MerchantDO findById( @Param("id")Long id) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("id", id);
        _param.put("value", id);
    

        return (MerchantDO) getSqlSession().selectOne(MerchantMapper.class.getName() + ".findById", _param);

    }


	/**
	 *  Query DB table <tt>merchant</tt> for records.
	 *
	 * 
     * <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from merchant</tt>
	 *
	 *	@param idList
	 *	@return List<MerchantDO>
	 */	 

    public List<MerchantDO> findByIdIn( @Param("idList")List idList) {

        Map<String,Object> _param = new HashMap<String,Object>();
    
        _param.put("idList", idList);
        _param.put("value", idList);
    

        return getSqlSession().selectList(MerchantMapper.class.getName() + ".findByIdIn", _param);

    }



}
